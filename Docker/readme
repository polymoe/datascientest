Docker - évaluation
Mohamed TOUMI
Bootcamp DE oct 2022
2022 12 13
---

Choix effectués :
- le livrable comporte:
    - un fichier docker-compose à la racine du dossier
    - un répertoire /log qui contient le fichier api_test.log dans lequel est écrit le résutat des tests des 3 conteneurs de test
    - un fichier log.txt (demandé dans l'ennoncé de l'examen) et qui reprend le contenu du fichier api_test.log à la fin de l'exécution des conteneurs
    - un fichier setup.sh qui définit les variables d'environnement, et construit et lance les images notamment (cf. ci-dessous remarque sur lancement de ce fichier)
    - un répertoire pour chaque test (chacun contenant les fichiers servant à créer les images des conteneurs, notamment les .py et le Dockerfile)
- les variables d'environnement : 
    - 4 au total
    - sont définies dans le fichier setup.sh (et supprimées à la fin de l'exécution des tests)
    - permettent d'alimenter le Dockerfile et le docker-compose en variables d'environnement pour les conteneurs
        - LOG : permet d'indiquer si oui (==1) les résultats des requêtes doivent être inscrites dans le fichier api_test.log
        - api_name : permet d'indiquer aux différents conteneurs le nom du conteneur de l'api, pour pouvoir ainsi la requêter sans utiliser l'adresse ip (faisant tous partie d'un même réseau défini dans le docker-compose)
        - pos_sentence : contient la phrase "positive" à passer au modèle
        - neg_sentence : contient la phrase "négative" à passer au modèle
- les volumes : 
    - afin que le fichier api_test.log puisse contenir le compte-rendu de tous les tests, des volumes ont été utilisés
    - dans chaque conteneur de test, un volume /my_log est défini, et est lié au répertoire /log sur le répertoir courant de la machine hôte (grâce au docker-compose)
    - ainsi tous les tests peuvent accéder au fichier api_test.log, et celui-ci est accessible facilement sur la machine hôte

Remarques :
- setup.sh : <!> ce fichier doit être lancé en mode "source", afin que les variables d'environnement puissent subsister dans l'environnement. 
    - NE PAS utiliser donc la commande: ./setup.sh
    - utiliser la commande : source ./setup.sh
- une interrogation :
    - dans des versions précédentes de ces codes, j'utilisais simplement un 'docker-compose up'
    - cependant, j'ai constaté qu'après l'exécution, le fichier de log n'était pas renseigné (n'existait pas encore sur la machine hôte, car probablement n'était pas encore écrit par les conteneurs sur la machine hôte)
    - il fallait ainsi à chaque fois, faire en sus un 'docker container start', pour que les conteneurs s'exécutent de nouveau, et cette fois écrivent bien dans le fichier api_test.log, comme attendu.
    - je n'ai pas réussi à débuger/expliquer cela (malgré avoir passé la majorité du temps de l'évaluation sur ce point)
    - ce qui m'a conduit, dans le fichier setup.sh à utiliser une double commande : 
        - d'abord : docker-compose up -d
        - puis : docker-compose start
        - de cette manière, je suis assuré que mes conteneurs ont bien tourné et écrit dans le fichier de log